1- Apresentação

2- Introducao
	- Projeto Permanência (CPS, 2016)
		- Finalidade de dirimir o indice de desistencia dos cursos no ambito do CPS
	- Escritório de Carreiras (Fatec SJC, 2017)
		- Finalidade de preparar e aproximar o mercado de trabalho ao aluno da FATEC sjc
		- Divido em etapas, e uma das etapas consite em mapear as competências
		- Plataforma para Jogos de Mapeamento de Competencias (Inácio, 2017)
			- Plataforma onde é criado um jogo que possibilita o mapeamento de competencias através de perguntas e respostas.

3- Problema
	- Falta de pessoal para dar suporte a todas aplicações implantadas no Centro Paula Souza;
	- Gerenciar a plataforma de forma independente;
	- É necessário garantir que a plataforma esteja sempre disponível;

4- Objetivo
	- Prover uma arquitetura que de suporte a plataforma, 
		- Qualidade
		- Agilidade
		- Estabilidade
		- Escalabilidade
		- Integração Contínua
	- Disponibilizar uma arquitetura que tenha suporte a alta demanda de requisições num ambiente com pouco recurso computacional e pessoal.

5- Requisitos
	- Maquina Virtual
		- Seja disponibilizada na Cloud Microsoft Azure;
		- Escalável;
		- Acesso Remoto por usuário e senha;
	- Servidor Front e Back 
		- Prover interface de comunicação com o usuário;
		- Servidor com suporte ao modelo Cliente-Servidor;
		- Suporte ao protocolo HTTP, para comunicação entre as aplicações de front e back end;
		- Ter suporte ao Java8 e compilada no formato .war;
	- Servidor de Banco de Dados
		- Armazenar informaçõe do jogo, como usuario, instituições, cursos, e jogos;
		- Prover arquitetura que possibilita a criação de relatórios;
		- Usuário com permissões de execução de comando DDL (Linguagem de Definição de Dados) e DML (Linguagem de Manipulação de Dados) na base de dados da plataforma;
	- Balanceador de Carga
		- Controlar a quantidade de acesso ao servidor de back-end;
		- Escalonar o servico de back-end, redirecionando ao servidor com menos carga;
		- Ter suporte a Proxy-Reverso;
		- Ter uma interface gráfica para monitoramento das requisições;
	- Integração Contínua
		- Controle de Versão
		- Contruções
		- Validações
		- Testes
		- Deploy
	- Interface de Monitoramento
		- Monitoramento em tempo real
			- Memória;
			- Processador;
			- Entrade e Saida de dados;
			- Consumo de internet;
		- Monitoramento do estado dos containers;
	- Quantidade e Escalabilidade
		- Plataforma sempre disponível aos usuários com qualidade;
		- 200 ETECs, 70 FATECs, cada uma com seus cursos e 40 alunos cada curso;
		- Fatec com 7 cursos, 40 alunos ingressantes, 360 acessos simultâneos devendo ser acessado de qualquer lugar;
	- Arquitetura
		- Clientes acessam a Interface Web, as requisições trafegarão pelo Load Balance e são direcionadas ao Servidor de back-end
		- Back end se comunica com o banco de dados
		- Ferramenta de Integração Contínua 
		- Interface de Monitoramento dos serviços necessários a plataforma e recursos do servidor
		- Maquina Virtual alocada no Azure para que hospede todos serviços.

6- Desenvolvimento
	- Tecnologias Utilizadas
		- Azure: Plataforma na nuvem que hospeda o servidor que implanta a plataforma.
		- Docker: Plataforma para prover a aquitetura
		- Java: suporte a aplicação
		- Tomcat: Servidor de Back-End e Front-End
		- Haproxy: Load Balancer
		- Mysql: SGDB para gerenciamento do Banco de Dados
		- Cadivsor: Interface de monitoramento
		- Jenkins: Ferramenta de Integração Contínua
	- Arquitetura
	- Mapskills-Cadvisor
		- Monitora os recursos do servidor 
		- Monitora o estado de todos serviços contidos na plataforma Mapskills
		- Acesso: http://ip_do_host:8888
	- Mapskills-Back
		- Tomcat 8.5
		- Java versão 1.8;
		- Contém a aplicação de back-end mapskills.war;
		- URL de acesso a API:http://ip_do_host:8080/mapskills
	- Mapskills-Front
		- Tomcat 8.5
		- Java versão 1.8;
		- Contém o projeto de interface de web mapskills-web.war;
		- URL de acesso a interface:http://ip_do_host/mapskills-web;
	- Mapskills-Mysql
		- Configurador o parametro bind-address para 0.0.0.0 permitindo acesso remoto;
		- Criado um usuário mapskills com permissão de acesso remoto e execução de comando DCL e DDL somente na base de dados mapskills;
		- Somente o container Mapskills-back pode se comunicar com o banco de dados;
	- Mapskills-Haproxy
		- Balanceador de Carga que controla as requisições HTTP destinadas ao servidor de back-end
		- Algoritmo Round Robin
			- Redireciona as requisições sempre ao proximo servidor, desta forma, os servidores de back-end sempre terão o mesmo numero de conexões.
		- Dashboard para visualização do número de requisçições, exibindo em tempo real a quantidade de dados trafegada pela rede.
		- URL de acesso ao dashboard:http://ip_do_host/mapskills-web;
	- Docker-Compose
		- Arquivo no formato .yaml com a finalidade de automatizar e orquestrar o processo de deploy da arquetura mapskills;
		- docker-compose de aplicação:
			- Mapskills-Back
			- Mapskills-Front
			- Mapskills-Haproxy
		- docker-compose de gerenciamento:
			- Mapskills-Jenkins
			- Mapskills-Cadvisor
			- Mapskill-Mysql
		- Links
			Como os serviços se comunicam, geram tambem uma segurança quanto ao acesso de informações
			- Mapskills-app e Mapskills-web
				- Comunicação entre a interface web e a aplicação de back-end por meio do protocolo HTTP;
			- Mapskills-app e Mapskills-Haproxy
				- Permite a comunicação entre o serviço de back-end e o balanceador de carga;
			- Mapskills-app e Mapskills-Mysql
				- Comunicação entre o back-end e o SGBD Mysql;
		- Volumes
			Tem a finalidade de persistir ou compartilhar dados sensíveis a plataforma.
			- Mapskills-Mysql: persistir dados no host 
			- Mapskills-Cadvisor: compartilhar informações do host com o container. Ex: "/sys", "/var/run".
			- Mapskills-Jenkins: 
				- Compartilhamento entre os container Mapskills-Back e Mapskills-Front
				- Compartilhamento do arquivo docker-compose.yaml para dentro do container
				- Compartilhamento de informações do host com o container. Ex: "/var/lib/docker".
	- Mapskills-Jenkins:
		 Responsável por executar os processos de integração contínua
	 	- Jobs:
	 		- Build-Mapksills-App: 
	 			Realiza o download do projeto no GitHub, baixa as dependencias e compila no formato .war, não executando 
	 			script do banco de dados, pois desta forma garante que os dados não são apagados.
	 			Utilizado o perfil Azure, configurado no arquivo pom.xml da aplicação. 
			- Build-Mapskills-Front:
				Realiza o download do projeto no GitHub, baixa as dependencias e compila no formato .war.
			- Copy Artifact Mapskills App e Copy Artifact Mapskills Front
				Copia os arquivos de formato .war dos diretórios ../target localizados no container Mapskills-Jenkins
				para os respectivos volume Docker Mapskills-Back e Mapskills-Front.
			- Deploy Mapskills. 
				Executa o arquivo docker-compose.yaml, realizando o deploy da aplicação.
7- Resultados
	Ao total entre os meses de maio e atualmente aplicação foi testada por mais de 1400 alunos das instituições da FATEC São José dos Campos,
	FATEC Tatuapé, FATEC Araçatuba, FATEC Garça, FATEC Mogi Mirim, FATEC Pindamonhangaba e FATEC Jales.
	- Experimento 1:
		- Monitoramento da aplicação, alto consumo de processador.
		- Inclusão de um balanceador de carga para escalonar o Servidor de back-end
	Experimento 2
		- Atualização de Versão do projeto, recriação do banco
		- Divisão da arquitetura em dois arquivos.
8- Trabalhos Futuros:
	- Alterar o Servidor de Controle de Versão para o Gitlab;
	- Deixar o arquivo application.properties flexível, para viabilizar a configuração dos servidor de arquivos (imagens).
	- Separar o Servidor de Banco de Dados
	- Implementar uma arquitetura de clusters utilizando o Docker Swarm ou Kubernets.
9- Agradecimento
	- Deus
	- Banca
	- Prof Sakauw
	- Prof Fatec
	- Amigos que fiz no curso.